@inproceedings{Santos:2019,
     author = {Wellison Santos and Marcus Xavier and David C. da Cunha and José C. M. Júnior and Daniel Adauto and Carlos Ferraz},
     title = {TrendsBot: Verificando a veracidade das mensagens do Telegram utilizando Data Stream},
     booktitle = {Anais Estendidos do XXXVII Simpósio Brasileiro de Redes de Computadores e Sistemas Distribuídos},
     location = {Gramado},
     year = {2019},
     keywords = {},
     issn = {2177-9384},
     pages = {65--72},
     publisher = {SBC},
     address = {Porto Alegre, RS, Brasil},
     doi = {10.5753/sbrc_estendido.2019.7771},
     url = {https://sol.sbc.org.br/index.php/sbrc_estendido/article/view/7771}
}

@Article{Neves:2024,
    author={Neves, Fl{\'a}vio
    and Souza, Rafael
    and Lima, Wesley
    and Raul, Wellison
    and Bonfim, Michel
    and Garcia, Vinicius},
    title={Smart Anonymity: a mechanism for recommending data anonymization algorithms based on data profiles for IoT environments},
    journal={The Journal of Supercomputing},
    year={2024},
    month={Sep},
    day={01},
    volume={80},
    number={14},
    pages={20956-21000},
    abstract={The internet of things (IoT) has seen rapid expansion, but this growth brings significant privacy challenges due to the large amounts of data generated by myriad IoT devices. To address these challenges, this study introduces Smart Anonymity, a method that determines the optimal data anonymization algorithm for a dataset by assessing its unique features. The solution leverages OWL ontologies grounded in description logic (DL), which facilitates inconsistency checks and the discovery of new facts for data validation. Additionally, machine learning (ML) is incorporated to improve the accuracy of these classifications. ML is also instrumental in recommending suitable anonymization algorithms, with the random forest algorithm being employed explicitly for this purpose. The findings from this research indicate that Smart Anonymity effectively improves user privacy.},
    issn={1573-0484},
    doi={10.1007/s11227-024-06209-3},
    url={https://doi.org/10.1007/s11227-024-06209-3}
}

@article{Santos:2024,
    title = {Microservices performance forecast using dynamic Multiple Predictor Systems},
    journal = {Engineering Applications of Artificial Intelligence},
    volume = {129},
    pages = {107649},
    year = {2024},
    issn = {0952-1976},
    doi = {https://doi.org/10.1016/j.engappai.2023.107649},
    url = {https://www.sciencedirect.com/science/article/pii/S095219762301833X},
    author = {Wellison R.M. Santos and Adalberto R. {Sampaio Jr.} and Nelson S. Rosa and George D.C. Cavalcanti},
    keywords = {Ensemble learning, Time series forecasting, Dynamic selection, Static combination, Microservices},
    abstract = {Time series forecasting has been applied to predict performance degradation in Microservice-Based Applications (MBAs). The prediction enables MBA adaptation to avoid performance degradation and maintain the customer experience. The approaches in the literature commonly perform the forecast using a single monolithic model. However, since no model is better than others for all possible scenarios, using only one increases the risk of inaccurate estimates. Thus, an alternative for improving the accuracy and robustness of the performance degradation of MBAs is to adopt an ensemble, i.e., a Multiple Predictor Systems (MPS). This paper proposes an MPS methodology that selects and combines the most suitable models to forecast test patterns from a pool of models. Experiments were carried out with 32 time series containing performance metrics commonly used for MBA adaptation. Different scenarios concerning the pool (homogeneous or heterogeneous) and the selection phase (static or dynamic) are considered. Likewise, six widely used models in the literature were employed for pool generation: ARIMA, Multilayer Perceptron, Support Vector Regression, Random Forest, Long Short-Term Memory, and eXtreme Gradient Boosting. The evaluation shows that the proposed solution maintains or improves the forecast accuracy on 26 out of 32 datasets (81.25%) compared to monolithic models. In particular, the homogeneous pool and the dynamic selection of predictors obtained very satisfactory results. Therefore, MPS provide more accurate decision-making for MBA interventions, avoiding incorrect adjustments that could degrade the customer experience. Source code, figures, and data sets are publicly available at https://github.com/gfads/mps-methodology.}
}

@inproceedings{Santos:2025,
    author = {M. Santos, Wellison R. and Sampaio, Adalberto R. and Rosa, Nelson S. and C. Cavalcanti, George D.},
    title = {Univariate vs multivariate prediction for containerised applications auto-scaling: a comparative study},
    year = {2025},
    isbn = {9798400706295},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3672608.3707770},
    doi = {10.1145/3672608.3707770},
    abstract = {Adaptive containerised systems have been developed using the Time Series Forecasting (TSF) technique. TSF analyses historical data patterns to estimate future trends, assuming they will occur again. Identifying future trends allows anticipating problems (e.g., high latency) and acting (e.g., replicating the service) to fix them before they occur. Depending on the number of features (i.e., metrics) used as input for prediction, TSF can be classified as univariate (single feature) or multivariate (two or more features). Despite the popularity of both TSF strategies, a unique strategy is typically implemented, and there is no comparison with the other. However, it is known that no strategy is the best choice for all possible scenarios. This paper presents a comparative study assessing univariate and multivariate proactive auto-scaling of containerised applications. A custom-made multivariate auto-scaling tool called Multivariate Forecasting Tool (MFT) was developed and compared with a production-grade univariate system called Predict Kube (PK). Both applications were evaluated using four popular open-source benchmark applications. The results show that the multivariate strategy decreased the response time of the evaluated applications in 75\% of the experiments (i.e., 9 out of 12) compared to the univariate, and it was more cost-effective in half of them (i.e., 6 out of 12). Furthermore, they also indicate that the multivariate strategy efficiency is more significant as the number of containers composing the application increases. This comparative study is expected to be a helpful guide for developers who want to choose the most effective proactive approach for their auto-scaling solutions.},
    booktitle = {Proceedings of the 40th ACM/SIGAPP Symposium on Applied Computing},
    pages = {1098–1105},
    numpages = {8},
    keywords = {time series forecasting, univariate forecasting, multivariate forecasting, deep learning, proactive auto-scaling},
    location = {Catania International Airport, Catania, Italy},
    series = {SAC '25}
}